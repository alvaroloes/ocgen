//
//  POSDiscount.m
//  PointOfSaleBlock
//
//  Created by Juan Fernández Sagasti on 23/9/15.
//  Copyright © 2015 eBay, Inc. All rights reserved.
//

#import "POSDiscount.h"

static NSString * const kPOSDiscountAdjustedAmountKey = @"adjustedAmount";
static NSString * const kPOSDiscountAmountKey = @"discountAmount";
static NSString * const kPOSDiscountBasisAmountKey = @"basisAmount";
static NSString * const kPOSDiscountCodeKey = @"discountCode";
static NSString * const kPOSDiscountDescriptionKey = @"description";
static NSString * const kPOSDiscountIDKey = @"id";
static NSString * const kPOSDiscountIsAppliedKey = @"applied";
static NSString * const kPOSDiscountIsStackableKey = @"stackable";
static NSString * const kPOSDiscountIsTaxableKey = @"discountTaxable";
static NSString * const kPOSDiscountTypeKey = @"computation";
static NSString * const kPOSDiscountValueKey = @"discountValue";


@implementation POSDiscount

// This is used for conversions between POSDiscountType <-> String representation of discount types
+ (NSArray *)typesArray
{
    static NSArray *types;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        types = @[
                  @"SPECIFIC_PRICE",
                  @"AMOUNT_OFF",
                  @"PERCENT_OFF",
                  ];
    });
    
    return types;
}



#pragma mark - POSModelProtocol

- (instancetype)initWithDictionary:(NSDictionary *)dictionary
{
    if (self = [super init])
    {
        _discountAdjustedAmount = [dictionary emf_numberValueForKey:kPOSDiscountAdjustedAmountKey];
        _discountAmount = [dictionary emf_numberValueForKey:kPOSDiscountAmountKey];
        _discountBasisAmount = [dictionary emf_numberValueForKey:kPOSDiscountBasisAmountKey];
        _discountCode = [dictionary emf_stringValueForKey:kPOSDiscountCodeKey];
        _discountDescription = [dictionary emf_stringValueForKey:kPOSDiscountDescriptionKey];
        _discountID = [dictionary emf_stringValueForKey:kPOSDiscountIDKey];
        _discountIsApplied = [dictionary emf_boolValueForKey:kPOSDiscountIsAppliedKey];
        _discountIsStackable = [dictionary emf_boolValueForKey:kPOSDiscountIsStackableKey];
        _discountIsTaxable = [dictionary emf_boolValueForKey:kPOSDiscountIsTaxableKey];
        _discountType = [POSModelUtils convertEnumString:[dictionary emf_stringValueForKey:kPOSDiscountTypeKey]
                                 toValueWithStringsArray:[POSDiscount typesArray]];
        _discountValue = [dictionary emf_numberValueForKey:kPOSDiscountValueKey];
    }
    
    return self;
}


- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    
    [dictionary emf_setObject:self.discountAdjustedAmount forKey:kPOSDiscountAdjustedAmountKey];
    [dictionary emf_setObject:self.discountAmount forKey:kPOSDiscountAmountKey];
    [dictionary emf_setObject:self.discountBasisAmount forKey:kPOSDiscountBasisAmountKey];
    [dictionary emf_setObject:self.discountCode forKey:kPOSDiscountCodeKey];
    [dictionary emf_setObject:self.discountDescription forKey:kPOSDiscountDescriptionKey];
    [dictionary emf_setObject:self.discountID forKey:kPOSDiscountIDKey];
    [dictionary emf_setObject:@(self.discountIsApplied) forKey:kPOSDiscountIsAppliedKey];
    [dictionary emf_setObject:@(self.discountIsStackable) forKey:kPOSDiscountIsStackableKey];
    [dictionary emf_setObject:@(self.discountIsTaxable) forKey:kPOSDiscountIsTaxableKey];
    [dictionary emf_setObject:[POSModelUtils convertEnumValue:self.discountType toStringWithStringsArray:[POSDiscount typesArray]]
                       forKey:kPOSDiscountTypeKey];
    [dictionary emf_setObject:self.discountValue forKey:kPOSDiscountValueKey];
    
    return dictionary;
}



#pragma mark - NSCoder

- (instancetype)initWithCoder:(NSCoder *)decoder
{
    // OCGEN: Autogenerated method. Do not touch
    if([super respondsToSelector:@selector(initWithCoder:)])
    {
        self = [super initWithCoder:decoder];
    }
    else
    {
        self = [super init];
    }
    if(self != nil)
    { 
        _discountAdjustedAmount = [decoder decodeObjectForKey:@"discountAdjustedAmount"];
        _discountAmount = [decoder decodeObjectForKey:@"discountAmount"];
        _discountBasisAmount = [decoder decodeObjectForKey:@"discountBasisAmount"];
        _discountCode = [decoder decodeObjectForKey:@"discountCode"];
        _discountDescription = [decoder decodeObjectForKey:@"discountDescription"];
        _discountID = [decoder decodeObjectForKey:@"discountID"];
        _discountIsApplied = [decoder decodeIntegerForKey:@"discountIsApplied"];
        _discountIsTaxable = [decoder decodeIntegerForKey:@"discountIsTaxable"];
        _discountIsStackable = [decoder decodeIntegerForKey:@"discountIsStackable"];
        _discountType = [decoder decodeIntegerForKey:@"discountType"];
        _discountValue = [decoder decodeObjectForKey:@"discountValue"];
    }
    return self;
}


- (void)encodeWithCoder:(NSCoder *)coder
{
    // OCGEN: Autogenerated method. Do not touch
    if([super respondsToSelector:@selector(encodeWithCoder:)])
    {
        [super encodeWithCoder:coder];
    }
    [coder encodeObject:_discountAdjustedAmount forKey:@"discountAdjustedAmount"];
    [coder encodeObject:_discountAmount forKey:@"discountAmount"];
    [coder encodeObject:_discountBasisAmount forKey:@"discountBasisAmount"];
    [coder encodeObject:_discountCode forKey:@"discountCode"];
    [coder encodeObject:_discountDescription forKey:@"discountDescription"];
    [coder encodeObject:_discountID forKey:@"discountID"];
    [coder encodeInteger:_discountIsApplied forKey:@"discountIsApplied"];
    [coder encodeInteger:_discountIsTaxable forKey:@"discountIsTaxable"];
    [coder encodeInteger:_discountIsStackable forKey:@"discountIsStackable"];
    [coder encodeInteger:_discountType forKey:@"discountType"];
    [coder encodeObject:_discountValue forKey:@"discountValue"];
}



#pragma mark
- (instancetype)copyWithZone:(NSZone *)zone
{
    // OCGEN: Autogenerated method. Do not touch
    typeof(self) copy = nil;
    if([super respondsToSelector:@selector(copyWithZone:)])
    {
        copy = [super copyWithZone:zone];
    }
    else
    {
        copy = [[[self class] allocWithZone:zone] init];
    }
    if (copy != nil)
    { 
        copy.discountAdjustedAmount = [self.discountAdjustedAmount copyWithZone:zone];
        copy.discountAmount = [self.discountAmount copyWithZone:zone];
        copy.discountBasisAmount = [self.discountBasisAmount copyWithZone:zone];
        copy.discountCode = [self.discountCode copyWithZone:zone];
        copy.discountDescription = [self.discountDescription copyWithZone:zone];
        copy.discountID = [self.discountID copyWithZone:zone];
        copy.discountIsApplied = self.discountIsApplied;
        copy.discountIsTaxable = self.discountIsTaxable;
        copy.discountIsStackable = self.discountIsStackable;
        copy.discountType = self.discountType;
        copy.discountValue = [self.discountValue copyWithZone:zone];
    }
    return copy;
}

@end
